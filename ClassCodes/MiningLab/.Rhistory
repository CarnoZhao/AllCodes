setwd('D:/Codes/ClassCodes/MiningLab/')
pixels = as.matrix(read.table('../Data/uspsdata.txt'))
labels = as.matrix(read.table('../Data/uspscl.txt'))
m = 200
n1 = 256
n2 = 2
n3 = 1
lambda = 0.5
sigmoid = function(x){
1 / (1 + exp(-x))
}
weight = function(){
w1 = rnorm((n1 + 1) * n2, 0, 4)
dim(w1) = c(n1 + 1, n2)
w2 = rnorm((n2 + 1) * n3, 0, 1)
dim(w2) = c(n2 + 1, n3)
return(list(w1 = w1, w2 = w2))
}
forward = function(pixels, w1, w2){
z1 = cbind(rep(1, nrow(pixels)), pixels)
a2 = z1 %*% w1
z2 = cbind(rep(1, nrow(a2)), sigmoid(a2))
a3 = z2 %*% w2
z3 = sigmoid(a3)
return(list(z1 = z1, z2 = z2, z3 = z3, a2 = a2))
}
backward = function(z1, z2, z3, a2, labels, w2){
dw2 = t(z2) %*% (labels - z3)
dw1 = t(z1) %*% (((labels - z3) %*% t(w2))[,-1] * a2 * (1 - a2))
return(list(dw1 = dw1 / m, dw2 = dw2 / m))
}
w1_w2 = weight()
View(w1_w2)
w1 = w1_w2$w1
w2 = w1_w2$w2
result1 = forward(pixels, w1, w2)
table(result1$z2)
table(round(result1$z2))
table(round(result1$z3))
table(round(result1$z3))
table(round(result1$a3))
hist(result1$a2)
hist(w1)
hist(w1)
w1 = runif((n1 + 1) * n2, -4, 4)
weight = function(){
w1 = runif((n1 + 1) * n2, -4, 4)
dim(w1) = c(n1 + 1, n2)
w2 = rnorm((n2 + 1) * n3, -1, 1)
dim(w2) = c(n2 + 1, n3)
return(list(w1 = w1, w2 = w2))
}
w1_w2 = weight()
w1 = w1_w2$w1
w2 = w1_w2$w2
result1 = forward(pixels, w1, w2)
hist(result1$a2)
hist(result1$z2)
hist(result1$z3)
hist(round(result1$z3))
table(round(result1$z3))
weight = function(){
w1 = runif((n1 + 1) * n2, -4, 4)
dim(w1) = c(n1 + 1, n2)
w2 = runif((n2 + 1) * n3, -1, 1)
dim(w2) = c(n2 + 1, n3)
return(list(w1 = w1, w2 = w2))
}
w1_w2 = weight()
w1 = w1_w2$w1
w2 = w1_w2$w2
result1 = forward(pixels, w1, w2)
table(round(result1$z3))
table(round(result1$z2))
table(round(result1$a2))
hist(result1$a2)
result2 = backward(result1$z1, result1$z2,
result1$z3, result1$a2, labels, w2)
w1 = w1 + result2$dw1 - (lambda / m) * cbind(0, w1[,-1])
w2 = w2 + result2$dw2 - (lambda / m) * cbind(0, w2[,-1])
View(w1)
backward = function(z1, z2, z3, a2, labels, w2){
dw2 = t(z2) %*% (labels - z3)
dw1 = t(z1) %*% (((labels - z3) %*% t(w2)) * z2 * (1 - z2))[,-1]
return(list(dw1 = dw1 / m, dw2 = dw2 / m))
}
w1_w2 = weight()
w1 = w1_w2$w1
w2 = w1_w2$w2
result1 = forward(pixels, w1, w2)
print(mean(round(result1$z3) == labels))
result2 = backward(result1$z1, result1$z2,
result1$z3, result1$a2, labels, w2)
w1 = w1 + result2$dw1 - (lambda / m) * cbind(0, w1[,-1])
w2 = w2 + result2$dw2 - (lambda / m) * cbind(0, w2[,-1])
result1 = forward(pixels, w1, w2)
print(mean(round(result1$z3) == labels))
result2 = backward(result1$z1, result1$z2,
result1$z3, result1$a2, labels, w2)
w1 = w1 + result2$dw1 - (lambda / m) * cbind(0, w1[,-1])
w2 = w2 + result2$dw2 - (lambda / m) * cbind(0, w2[,-1])
result1 = forward(pixels, w1, w2)
print(mean(round(result1$z3) == labels))
lambda = 1
result1 = forward(pixels, w1, w2)
print(mean(round(result1$z3) == labels))
print(as.vector(round(result1$z3)))
result2 = backward(result1$z1, result1$z2,
result1$z3, result1$a2, labels, w2)
w1 = w1 - result2$dw1 - (lambda / m) * cbind(0, w1[,-1])
w2 = w2 - result2$dw2 - (lambda / m) * cbind(0, w2[,-1])
}
